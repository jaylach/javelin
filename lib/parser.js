/* parser generated by jison 0.4.13 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var parser = (function(){
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"template":3,"first_statement_list":4,"EOF":5,"opt_statement_list":6,"statement_list":7,"statement":8,"last_statement":9,"block_node_statement":10,"leaf_node_statement":11,"custom_node_block_statement":12,"if_block":13,"COMMENT":14,"first_statement":15,"RETURN":16,"expression":17,"leaf_node_type":18,"STRING":19,"AS":20,"END":21,"block_node_type":22,"node_attribute":23,"node_attribute_list":24,":":25,"if_expression":26,",":27,"node_accessor":28,"attribute_statement":29,"global_node_accessor":30,"local_node_accessor":31,"@":32,"identifier":33,"[":34,"]":35,".":36,"(":37,"attribute_setter_list":38,")":39,"attribute_setter":40,"ATTRIBUTE":41,"=":42,"TRUE":43,"FALSE":44,"THEN":45,"opt_elseif_block_list":46,"opt_else_block":47,"ELSE":48,"elseif_block_list":49,"elseif_block":50,"ELSEIF":51,"IF":52,"NULL":53,"NUMBER":54,"==":55,"!=":56,"+":57,"-":58,"*":59,"/":60,"^":61,"%":62,"<":63,"<=":64,">":65,">=":66,"AND":67,"OR":68,"NOT":69,"IDENTIFIER":70,"node_type_list":71,"OBJECT":72,"ARRAY":73,"PROPERTY":74,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",14:"COMMENT",16:"RETURN",19:"STRING",20:"AS",21:"END",25:":",27:",",32:"@",34:"[",35:"]",36:".",37:"(",39:")",41:"ATTRIBUTE",42:"=",43:"TRUE",44:"FALSE",45:"THEN",48:"ELSE",51:"ELSEIF",52:"IF",53:"NULL",54:"NUMBER",55:"==",56:"!=",57:"+",58:"-",59:"*",60:"/",61:"^",62:"%",63:"<",64:"<=",65:">",66:">=",67:"AND",68:"OR",69:"NOT",70:"IDENTIFIER",72:"OBJECT",73:"ARRAY",74:"PROPERTY"},
productions_: [0,[3,2],[6,0],[6,1],[7,1],[7,2],[8,1],[8,1],[8,1],[8,1],[8,1],[8,1],[4,1],[4,2],[15,1],[15,1],[9,2],[12,5],[10,4],[11,2],[11,3],[24,1],[24,3],[23,1],[23,2],[28,1],[28,1],[30,2],[31,1],[31,3],[31,3],[31,4],[29,3],[38,1],[38,3],[40,3],[40,3],[40,3],[13,6],[47,0],[47,2],[46,0],[46,1],[49,1],[49,2],[50,4],[26,2],[17,1],[17,1],[17,1],[17,1],[17,1],[17,1],[17,3],[17,3],[17,3],[17,3],[17,3],[17,3],[17,3],[17,3],[17,3],[17,3],[17,3],[17,3],[17,3],[17,3],[17,3],[17,3],[17,2],[33,1],[71,1],[71,1],[22,1],[22,1],[18,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
      this.$ = new yy.Template($$[$0-1]);
      return this.$;
    
break;
case 2: this.$ = []; 
break;
case 4: 
      if ( !Array.isArray($$[$0]) ) {
        this.$ = [ $$[$0] ]; 
      }
    
break;
case 5: 
      this.$ = $$[$0-1].concat($$[$0]); 
    
break;
case 11: this.$ = new yy.Comment($$[$0]); 
break;
case 12: this.$ = [ $$[$0] ]; 
break;
case 13: 
      $$[$0-1].push($$[$0]);
      this.$ = $$[$0-1];
    
break;
case 16: this.$ = new yy.Return($$[$0]); 
break;
case 17: 
      switch ( $$[$0-4] ) {
        case 'property': {
          this.$ = new yy.CustomProperty($$[$0-3], $$[$0-1]); 
          break;
        }
      }
    
break;
case 18:
      var outKey = $$[$0-2].getOutKey();
      delete $$[$0-2]['attributes'];

      if ( $$[$0-3] === 'object' ) {
        this.$ = new yy.ObjectBlock($$[$0-2], outKey, $$[$0-1]);
      }
      else if ( $$[$0-3] === 'array' ) {
        this.$ = new yy.ArrayBlock($$[$0-2], outKey, $$[$0-1]);
      }
    
break;
case 19: 
      this.$ = $$[$0].map(function(item) {
        var outKey = item.getOutKey();
        delete item['attributes'];

        return new yy.Property('PROPERTY', item, outKey);
      });
    
break;
case 20: 
      $$[$0].body = $$[$0-2]; 
      this.$ = $$[$0];
    
break;
case 21: this.$ = [ $$[$0] ]; 
break;
case 22: $$[$0-2].push($$[$0]); 
break;
case 24: $$[$0-1].attributes = $$[$0] 
break;
case 27: 
      $$[$0].base.isGlobal = true;
      this.$ = $$[$0];
    
break;
case 28: this.$ = new yy.Accessor($$[$0]); 
break;
case 29: this.$ = new yy.Accessor(new yy.Identifier($$[$0-1])); 
break;
case 30: $$[$0-2].addProperty($$[$0]); 
break;
case 31: $$[$0-3].addProperty(new yy.Identifier($$[$0-1])); 
break;
case 32: this.$ = $$[$0-1]; 
break;
case 34: $$[$0-2].addAttribute($$[$0]); 
break;
case 35: this.$ = new yy.Attribute($$[$0-2], $$[$0]); 
break;
case 36: this.$ = new yy.Attribute($$[$0-2], true); 
break;
case 37: this.$ = new yy.Attribute($$[$0-2], false); 
break;
case 38:
      $$[$0-5].body = $$[$0-3];
      this.$ = [ $$[$0-5] ];

      if ( $$[$0-2] != null ) this.$.push($$[$0-2]);
      if ( $$[$0-1] != null ) this.$.push($$[$0-1]);
    
break;
case 40: this.$ = new yy.ConditionBlock('else', null, $$[$0]); 
break;
case 45: this.$ = new yy.ConditionBlock('else if', $$[$0-2], $$[$0]); 
break;
case 46: this.$ = new yy.ConditionBlock('if', $$[$0], []); 
break;
case 47: this.$ = new yy.Literal($$[$0]); 
break;
case 48: this.$ = new yy.Literal($$[$0]); 
break;
case 49: this.$ = new yy.Literal($$[$0]); 
break;
case 50: this.$ = new yy.Literal('"' + $$[$0] + '"'); 
break;
case 51: this.$ = new yy.Literal($$[$0]); 
break;
case 53: this.$ = new yy.Identifier($$[$0-1]); 
break;
case 54:
      $$[$0-1].wrapped = true; 
      this.$ = $$[$0-1]; 
    
break;
case 55: this.$ = new yy.Operation('===', $$[$0-2], $$[$0]); 
break;
case 56: this.$ = new yy.Operation('!==', $$[$0-2], $$[$0]); 
break;
case 57: this.$ = new yy.Operation($$[$0-1], $$[$0-2], $$[$0]); 
break;
case 58: this.$ = new yy.Operation($$[$0-1], $$[$0-2], $$[$0]); 
break;
case 59: this.$ = new yy.Operation($$[$0-1], $$[$0-2], $$[$0]); 
break;
case 60: this.$ = new yy.Operation($$[$0-1], $$[$0-2], $$[$0]); 
break;
case 61: this.$ = new yy.Operation($$[$0-1], $$[$0-2], $$[$0]); 
break;
case 62: this.$ = new yy.Operation($$[$0-1], $$[$0-2], $$[$0]); 
break;
case 63: this.$ = new yy.Operation($$[$0-1], $$[$0-2], $$[$0]); 
break;
case 64: this.$ = new yy.Operation($$[$0-1], $$[$0-2], $$[$0]); 
break;
case 65: this.$ = new yy.Operation($$[$0-1], $$[$0-2], $$[$0]); 
break;
case 66: this.$ = new yy.Operation($$[$0-1], $$[$0-2], $$[$0]); 
break;
case 67: this.$ = new yy.Operation('&&', $$[$0-2], $$[$0]); 
break;
case 68: this.$ = new yy.Operation('||', $$[$0-2], $$[$0]); 
break;
case 69: this.$ = new yy.Operation('!', null, $$[$0]); 
break;
case 70: this.$ = new yy.Identifier($$[$0]); 
break;
}
},
table: [{3:1,4:2,10:4,14:[1,5],15:3,22:6,72:[1,7],73:[1,8]},{1:[3]},{5:[1,9],10:4,14:[1,5],15:10,22:6,72:[1,7],73:[1,8]},{5:[2,12],14:[2,12],72:[2,12],73:[2,12]},{5:[2,14],14:[2,14],72:[2,14],73:[2,14]},{5:[2,15],14:[2,15],72:[2,15],73:[2,15]},{23:11,28:12,30:13,31:14,32:[1,15],33:16,34:[1,17],70:[1,18]},{32:[2,73],34:[2,73],70:[2,73]},{32:[2,74],34:[2,74],70:[2,74]},{1:[2,1]},{5:[2,13],14:[2,13],72:[2,13],73:[2,13]},{6:19,7:20,8:21,9:22,10:23,11:24,12:25,13:26,14:[1,27],16:[1,28],18:29,21:[2,2],22:6,26:30,52:[1,32],72:[1,7],73:[1,8],74:[1,31]},{14:[2,23],16:[2,23],21:[2,23],25:[2,23],27:[2,23],29:33,37:[1,34],48:[2,23],51:[2,23],52:[2,23],72:[2,23],73:[2,23],74:[2,23]},{14:[2,25],16:[2,25],21:[2,25],25:[2,25],27:[2,25],37:[2,25],48:[2,25],51:[2,25],52:[2,25],72:[2,25],73:[2,25],74:[2,25]},{14:[2,26],16:[2,26],21:[2,26],25:[2,26],27:[2,26],34:[1,36],36:[1,35],37:[2,26],48:[2,26],51:[2,26],52:[2,26],72:[2,26],73:[2,26],74:[2,26]},{31:37,33:16,34:[1,17],70:[1,18]},{14:[2,28],16:[2,28],21:[2,28],25:[2,28],27:[2,28],34:[2,28],36:[2,28],37:[2,28],48:[2,28],51:[2,28],52:[2,28],72:[2,28],73:[2,28],74:[2,28]},{19:[1,38]},{14:[2,70],16:[2,70],21:[2,70],25:[2,70],27:[2,70],34:[2,70],36:[2,70],37:[2,70],39:[2,70],45:[2,70],48:[2,70],51:[2,70],52:[2,70],55:[2,70],56:[2,70],57:[2,70],58:[2,70],59:[2,70],60:[2,70],61:[2,70],62:[2,70],63:[2,70],64:[2,70],65:[2,70],66:[2,70],67:[2,70],68:[2,70],72:[2,70],73:[2,70],74:[2,70]},{21:[1,39]},{8:40,9:22,10:23,11:24,12:25,13:26,14:[1,27],16:[1,28],18:29,21:[2,3],22:6,26:30,48:[2,3],51:[2,3],52:[1,32],72:[1,7],73:[1,8],74:[1,31]},{14:[2,4],16:[2,4],21:[2,4],48:[2,4],51:[2,4],52:[2,4],72:[2,4],73:[2,4],74:[2,4]},{14:[2,6],16:[2,6],21:[2,6],48:[2,6],51:[2,6],52:[2,6],72:[2,6],73:[2,6],74:[2,6]},{14:[2,7],16:[2,7],21:[2,7],48:[2,7],51:[2,7],52:[2,7],72:[2,7],73:[2,7],74:[2,7]},{14:[2,8],16:[2,8],21:[2,8],25:[1,41],48:[2,8],51:[2,8],52:[2,8],72:[2,8],73:[2,8],74:[2,8]},{14:[2,9],16:[2,9],21:[2,9],48:[2,9],51:[2,9],52:[2,9],72:[2,9],73:[2,9],74:[2,9]},{14:[2,10],16:[2,10],21:[2,10],48:[2,10],51:[2,10],52:[2,10],72:[2,10],73:[2,10],74:[2,10]},{14:[2,11],16:[2,11],21:[2,11],48:[2,11],51:[2,11],52:[2,11],72:[2,11],73:[2,11],74:[2,11]},{17:42,19:[1,46],33:48,34:[1,49],37:[1,50],43:[1,43],44:[1,44],53:[1,45],54:[1,47],69:[1,51],70:[1,18]},{19:[1,53],23:54,24:52,28:12,30:13,31:14,32:[1,15],33:16,34:[1,17],70:[1,18]},{45:[1,55]},{19:[2,75],32:[2,75],34:[2,75],70:[2,75]},{17:56,19:[1,46],33:48,34:[1,49],37:[1,50],43:[1,43],44:[1,44],53:[1,45],54:[1,47],69:[1,51],70:[1,18]},{14:[2,24],16:[2,24],21:[2,24],25:[2,24],27:[2,24],48:[2,24],51:[2,24],52:[2,24],72:[2,24],73:[2,24],74:[2,24]},{38:57,40:58,41:[1,59]},{33:60,70:[1,18]},{19:[1,61]},{14:[2,27],16:[2,27],21:[2,27],25:[2,27],27:[2,27],34:[1,36],36:[1,35],37:[2,27],48:[2,27],51:[2,27],52:[2,27],72:[2,27],73:[2,27],74:[2,27]},{35:[1,62]},{5:[2,18],14:[2,18],16:[2,18],21:[2,18],48:[2,18],51:[2,18],52:[2,18],72:[2,18],73:[2,18],74:[2,18]},{14:[2,5],16:[2,5],21:[2,5],48:[2,5],51:[2,5],52:[2,5],72:[2,5],73:[2,5],74:[2,5]},{26:63,52:[1,32]},{14:[2,16],16:[2,16],21:[2,16],48:[2,16],51:[2,16],52:[2,16],55:[1,64],56:[1,65],57:[1,66],58:[1,67],59:[1,68],60:[1,69],61:[1,70],62:[1,71],63:[1,72],64:[1,73],65:[1,74],66:[1,75],67:[1,76],68:[1,77],72:[2,16],73:[2,16],74:[2,16]},{14:[2,47],16:[2,47],21:[2,47],25:[2,47],39:[2,47],45:[2,47],48:[2,47],51:[2,47],52:[2,47],55:[2,47],56:[2,47],57:[2,47],58:[2,47],59:[2,47],60:[2,47],61:[2,47],62:[2,47],63:[2,47],64:[2,47],65:[2,47],66:[2,47],67:[2,47],68:[2,47],72:[2,47],73:[2,47],74:[2,47]},{14:[2,48],16:[2,48],21:[2,48],25:[2,48],39:[2,48],45:[2,48],48:[2,48],51:[2,48],52:[2,48],55:[2,48],56:[2,48],57:[2,48],58:[2,48],59:[2,48],60:[2,48],61:[2,48],62:[2,48],63:[2,48],64:[2,48],65:[2,48],66:[2,48],67:[2,48],68:[2,48],72:[2,48],73:[2,48],74:[2,48]},{14:[2,49],16:[2,49],21:[2,49],25:[2,49],39:[2,49],45:[2,49],48:[2,49],51:[2,49],52:[2,49],55:[2,49],56:[2,49],57:[2,49],58:[2,49],59:[2,49],60:[2,49],61:[2,49],62:[2,49],63:[2,49],64:[2,49],65:[2,49],66:[2,49],67:[2,49],68:[2,49],72:[2,49],73:[2,49],74:[2,49]},{14:[2,50],16:[2,50],21:[2,50],25:[2,50],39:[2,50],45:[2,50],48:[2,50],51:[2,50],52:[2,50],55:[2,50],56:[2,50],57:[2,50],58:[2,50],59:[2,50],60:[2,50],61:[2,50],62:[2,50],63:[2,50],64:[2,50],65:[2,50],66:[2,50],67:[2,50],68:[2,50],72:[2,50],73:[2,50],74:[2,50]},{14:[2,51],16:[2,51],21:[2,51],25:[2,51],39:[2,51],45:[2,51],48:[2,51],51:[2,51],52:[2,51],55:[2,51],56:[2,51],57:[2,51],58:[2,51],59:[2,51],60:[2,51],61:[2,51],62:[2,51],63:[2,51],64:[2,51],65:[2,51],66:[2,51],67:[2,51],68:[2,51],72:[2,51],73:[2,51],74:[2,51]},{14:[2,52],16:[2,52],21:[2,52],25:[2,52],39:[2,52],45:[2,52],48:[2,52],51:[2,52],52:[2,52],55:[2,52],56:[2,52],57:[2,52],58:[2,52],59:[2,52],60:[2,52],61:[2,52],62:[2,52],63:[2,52],64:[2,52],65:[2,52],66:[2,52],67:[2,52],68:[2,52],72:[2,52],73:[2,52],74:[2,52]},{19:[1,78]},{17:79,19:[1,46],33:48,34:[1,49],37:[1,50],43:[1,43],44:[1,44],53:[1,45],54:[1,47],69:[1,51],70:[1,18]},{17:80,19:[1,46],33:48,34:[1,49],37:[1,50],43:[1,43],44:[1,44],53:[1,45],54:[1,47],69:[1,51],70:[1,18]},{14:[2,19],16:[2,19],21:[2,19],25:[2,19],27:[1,81],48:[2,19],51:[2,19],52:[2,19],72:[2,19],73:[2,19],74:[2,19]},{20:[1,82]},{14:[2,21],16:[2,21],21:[2,21],25:[2,21],27:[2,21],48:[2,21],51:[2,21],52:[2,21],72:[2,21],73:[2,21],74:[2,21]},{6:83,7:20,8:21,9:22,10:23,11:24,12:25,13:26,14:[1,27],16:[1,28],18:29,21:[2,2],22:6,26:30,48:[2,2],51:[2,2],52:[1,32],72:[1,7],73:[1,8],74:[1,31]},{14:[2,46],16:[2,46],21:[2,46],25:[2,46],45:[2,46],48:[2,46],51:[2,46],52:[2,46],55:[1,64],56:[1,65],57:[1,66],58:[1,67],59:[1,68],60:[1,69],61:[1,70],62:[1,71],63:[1,72],64:[1,73],65:[1,74],66:[1,75],67:[1,76],68:[1,77],72:[2,46],73:[2,46],74:[2,46]},{27:[1,85],39:[1,84]},{27:[2,33],39:[2,33]},{42:[1,86]},{14:[2,30],16:[2,30],21:[2,30],25:[2,30],27:[2,30],34:[2,30],36:[2,30],37:[2,30],48:[2,30],51:[2,30],52:[2,30],72:[2,30],73:[2,30],74:[2,30]},{35:[1,87]},{14:[2,29],16:[2,29],21:[2,29],25:[2,29],27:[2,29],34:[2,29],36:[2,29],37:[2,29],48:[2,29],51:[2,29],52:[2,29],72:[2,29],73:[2,29],74:[2,29]},{14:[2,20],16:[2,20],21:[2,20],25:[2,20],48:[2,20],51:[2,20],52:[2,20],72:[2,20],73:[2,20],74:[2,20]},{17:88,19:[1,46],33:48,34:[1,49],37:[1,50],43:[1,43],44:[1,44],53:[1,45],54:[1,47],69:[1,51],70:[1,18]},{17:89,19:[1,46],33:48,34:[1,49],37:[1,50],43:[1,43],44:[1,44],53:[1,45],54:[1,47],69:[1,51],70:[1,18]},{17:90,19:[1,46],33:48,34:[1,49],37:[1,50],43:[1,43],44:[1,44],53:[1,45],54:[1,47],69:[1,51],70:[1,18]},{17:91,19:[1,46],33:48,34:[1,49],37:[1,50],43:[1,43],44:[1,44],53:[1,45],54:[1,47],69:[1,51],70:[1,18]},{17:92,19:[1,46],33:48,34:[1,49],37:[1,50],43:[1,43],44:[1,44],53:[1,45],54:[1,47],69:[1,51],70:[1,18]},{17:93,19:[1,46],33:48,34:[1,49],37:[1,50],43:[1,43],44:[1,44],53:[1,45],54:[1,47],69:[1,51],70:[1,18]},{17:94,19:[1,46],33:48,34:[1,49],37:[1,50],43:[1,43],44:[1,44],53:[1,45],54:[1,47],69:[1,51],70:[1,18]},{17:95,19:[1,46],33:48,34:[1,49],37:[1,50],43:[1,43],44:[1,44],53:[1,45],54:[1,47],69:[1,51],70:[1,18]},{17:96,19:[1,46],33:48,34:[1,49],37:[1,50],43:[1,43],44:[1,44],53:[1,45],54:[1,47],69:[1,51],70:[1,18]},{17:97,19:[1,46],33:48,34:[1,49],37:[1,50],43:[1,43],44:[1,44],53:[1,45],54:[1,47],69:[1,51],70:[1,18]},{17:98,19:[1,46],33:48,34:[1,49],37:[1,50],43:[1,43],44:[1,44],53:[1,45],54:[1,47],69:[1,51],70:[1,18]},{17:99,19:[1,46],33:48,34:[1,49],37:[1,50],43:[1,43],44:[1,44],53:[1,45],54:[1,47],69:[1,51],70:[1,18]},{17:100,19:[1,46],33:48,34:[1,49],37:[1,50],43:[1,43],44:[1,44],53:[1,45],54:[1,47],69:[1,51],70:[1,18]},{17:101,19:[1,46],33:48,34:[1,49],37:[1,50],43:[1,43],44:[1,44],53:[1,45],54:[1,47],69:[1,51],70:[1,18]},{35:[1,102]},{39:[1,103],55:[1,64],56:[1,65],57:[1,66],58:[1,67],59:[1,68],60:[1,69],61:[1,70],62:[1,71],63:[1,72],64:[1,73],65:[1,74],66:[1,75],67:[1,76],68:[1,77]},{14:[2,69],16:[2,69],21:[2,69],25:[2,69],39:[2,69],45:[2,69],48:[2,69],51:[2,69],52:[2,69],55:[2,69],56:[2,69],57:[2,69],58:[2,69],59:[2,69],60:[2,69],61:[1,70],62:[2,69],63:[2,69],64:[2,69],65:[2,69],66:[2,69],67:[2,69],68:[2,69],72:[2,69],73:[2,69],74:[2,69]},{23:104,28:12,30:13,31:14,32:[1,15],33:16,34:[1,17],70:[1,18]},{6:105,7:20,8:21,9:22,10:23,11:24,12:25,13:26,14:[1,27],16:[1,28],18:29,21:[2,2],22:6,26:30,52:[1,32],72:[1,7],73:[1,8],74:[1,31]},{21:[2,41],46:106,48:[2,41],49:107,50:108,51:[1,109]},{14:[2,32],16:[2,32],21:[2,32],25:[2,32],27:[2,32],48:[2,32],51:[2,32],52:[2,32],72:[2,32],73:[2,32],74:[2,32]},{40:110,41:[1,59]},{19:[1,111],43:[1,112],44:[1,113]},{14:[2,31],16:[2,31],21:[2,31],25:[2,31],27:[2,31],34:[2,31],36:[2,31],37:[2,31],48:[2,31],51:[2,31],52:[2,31],72:[2,31],73:[2,31],74:[2,31]},{14:[2,55],16:[2,55],21:[2,55],25:[2,55],39:[2,55],45:[2,55],48:[2,55],51:[2,55],52:[2,55],55:[2,55],56:[2,55],57:[1,66],58:[1,67],59:[1,68],60:[1,69],61:[1,70],62:[1,71],63:[2,55],64:[2,55],65:[2,55],66:[2,55],67:[2,55],68:[2,55],72:[2,55],73:[2,55],74:[2,55]},{14:[2,56],16:[2,56],21:[2,56],25:[2,56],39:[2,56],45:[2,56],48:[2,56],51:[2,56],52:[2,56],55:[2,56],56:[2,56],57:[1,66],58:[1,67],59:[1,68],60:[1,69],61:[1,70],62:[1,71],63:[2,56],64:[2,56],65:[2,56],66:[2,56],67:[2,56],68:[2,56],72:[2,56],73:[2,56],74:[2,56]},{14:[2,57],16:[2,57],21:[2,57],25:[2,57],39:[2,57],45:[2,57],48:[2,57],51:[2,57],52:[2,57],55:[2,57],56:[2,57],57:[2,57],58:[2,57],59:[1,68],60:[1,69],61:[1,70],62:[1,71],63:[2,57],64:[2,57],65:[2,57],66:[2,57],67:[2,57],68:[2,57],72:[2,57],73:[2,57],74:[2,57]},{14:[2,58],16:[2,58],21:[2,58],25:[2,58],39:[2,58],45:[2,58],48:[2,58],51:[2,58],52:[2,58],55:[2,58],56:[2,58],57:[2,58],58:[2,58],59:[1,68],60:[1,69],61:[1,70],62:[1,71],63:[2,58],64:[2,58],65:[2,58],66:[2,58],67:[2,58],68:[2,58],72:[2,58],73:[2,58],74:[2,58]},{14:[2,59],16:[2,59],21:[2,59],25:[2,59],39:[2,59],45:[2,59],48:[2,59],51:[2,59],52:[2,59],55:[2,59],56:[2,59],57:[2,59],58:[2,59],59:[2,59],60:[2,59],61:[1,70],62:[2,59],63:[2,59],64:[2,59],65:[2,59],66:[2,59],67:[2,59],68:[2,59],72:[2,59],73:[2,59],74:[2,59]},{14:[2,60],16:[2,60],21:[2,60],25:[2,60],39:[2,60],45:[2,60],48:[2,60],51:[2,60],52:[2,60],55:[2,60],56:[2,60],57:[2,60],58:[2,60],59:[2,60],60:[2,60],61:[1,70],62:[2,60],63:[2,60],64:[2,60],65:[2,60],66:[2,60],67:[2,60],68:[2,60],72:[2,60],73:[2,60],74:[2,60]},{14:[2,61],16:[2,61],21:[2,61],25:[2,61],39:[2,61],45:[2,61],48:[2,61],51:[2,61],52:[2,61],55:[2,61],56:[2,61],57:[2,61],58:[2,61],59:[2,61],60:[2,61],61:[1,70],62:[2,61],63:[2,61],64:[2,61],65:[2,61],66:[2,61],67:[2,61],68:[2,61],72:[2,61],73:[2,61],74:[2,61]},{14:[2,62],16:[2,62],21:[2,62],25:[2,62],39:[2,62],45:[2,62],48:[2,62],51:[2,62],52:[2,62],55:[2,62],56:[2,62],57:[2,62],58:[2,62],59:[2,62],60:[2,62],61:[1,70],62:[2,62],63:[2,62],64:[2,62],65:[2,62],66:[2,62],67:[2,62],68:[2,62],72:[2,62],73:[2,62],74:[2,62]},{14:[2,63],16:[2,63],21:[2,63],25:[2,63],39:[2,63],45:[2,63],48:[2,63],51:[2,63],52:[2,63],55:[1,64],56:[1,65],57:[1,66],58:[1,67],59:[1,68],60:[1,69],61:[1,70],62:[1,71],63:[2,63],64:[2,63],65:[2,63],66:[2,63],67:[2,63],68:[2,63],72:[2,63],73:[2,63],74:[2,63]},{14:[2,64],16:[2,64],21:[2,64],25:[2,64],39:[2,64],45:[2,64],48:[2,64],51:[2,64],52:[2,64],55:[1,64],56:[1,65],57:[1,66],58:[1,67],59:[1,68],60:[1,69],61:[1,70],62:[1,71],63:[2,64],64:[2,64],65:[2,64],66:[2,64],67:[2,64],68:[2,64],72:[2,64],73:[2,64],74:[2,64]},{14:[2,65],16:[2,65],21:[2,65],25:[2,65],39:[2,65],45:[2,65],48:[2,65],51:[2,65],52:[2,65],55:[1,64],56:[1,65],57:[1,66],58:[1,67],59:[1,68],60:[1,69],61:[1,70],62:[1,71],63:[2,65],64:[2,65],65:[2,65],66:[2,65],67:[2,65],68:[2,65],72:[2,65],73:[2,65],74:[2,65]},{14:[2,66],16:[2,66],21:[2,66],25:[2,66],39:[2,66],45:[2,66],48:[2,66],51:[2,66],52:[2,66],55:[1,64],56:[1,65],57:[1,66],58:[1,67],59:[1,68],60:[1,69],61:[1,70],62:[1,71],63:[2,66],64:[2,66],65:[2,66],66:[2,66],67:[2,66],68:[2,66],72:[2,66],73:[2,66],74:[2,66]},{14:[2,67],16:[2,67],21:[2,67],25:[2,67],39:[2,67],45:[2,67],48:[2,67],51:[2,67],52:[2,67],55:[1,64],56:[1,65],57:[1,66],58:[1,67],59:[1,68],60:[1,69],61:[1,70],62:[1,71],63:[1,72],64:[1,73],65:[1,74],66:[1,75],67:[2,67],68:[2,67],72:[2,67],73:[2,67],74:[2,67]},{14:[2,68],16:[2,68],21:[2,68],25:[2,68],39:[2,68],45:[2,68],48:[2,68],51:[2,68],52:[2,68],55:[1,64],56:[1,65],57:[1,66],58:[1,67],59:[1,68],60:[1,69],61:[1,70],62:[1,71],63:[1,72],64:[1,73],65:[1,74],66:[1,75],67:[1,76],68:[2,68],72:[2,68],73:[2,68],74:[2,68]},{14:[2,53],16:[2,53],21:[2,53],25:[2,53],39:[2,53],45:[2,53],48:[2,53],51:[2,53],52:[2,53],55:[2,53],56:[2,53],57:[2,53],58:[2,53],59:[2,53],60:[2,53],61:[2,53],62:[2,53],63:[2,53],64:[2,53],65:[2,53],66:[2,53],67:[2,53],68:[2,53],72:[2,53],73:[2,53],74:[2,53]},{14:[2,54],16:[2,54],21:[2,54],25:[2,54],39:[2,54],45:[2,54],48:[2,54],51:[2,54],52:[2,54],55:[2,54],56:[2,54],57:[2,54],58:[2,54],59:[2,54],60:[2,54],61:[2,54],62:[2,54],63:[2,54],64:[2,54],65:[2,54],66:[2,54],67:[2,54],68:[2,54],72:[2,54],73:[2,54],74:[2,54]},{14:[2,22],16:[2,22],21:[2,22],25:[2,22],27:[2,22],48:[2,22],51:[2,22],52:[2,22],72:[2,22],73:[2,22],74:[2,22]},{21:[1,114]},{21:[2,39],47:115,48:[1,116]},{21:[2,42],48:[2,42],50:117,51:[1,109]},{21:[2,43],48:[2,43],51:[2,43]},{17:118,19:[1,46],33:48,34:[1,49],37:[1,50],43:[1,43],44:[1,44],53:[1,45],54:[1,47],69:[1,51],70:[1,18]},{27:[2,34],39:[2,34]},{27:[2,35],39:[2,35]},{27:[2,36],39:[2,36]},{27:[2,37],39:[2,37]},{14:[2,17],16:[2,17],21:[2,17],48:[2,17],51:[2,17],52:[2,17],72:[2,17],73:[2,17],74:[2,17]},{21:[1,119]},{6:120,7:20,8:21,9:22,10:23,11:24,12:25,13:26,14:[1,27],16:[1,28],18:29,21:[2,2],22:6,26:30,52:[1,32],72:[1,7],73:[1,8],74:[1,31]},{21:[2,44],48:[2,44],51:[2,44]},{45:[1,121],55:[1,64],56:[1,65],57:[1,66],58:[1,67],59:[1,68],60:[1,69],61:[1,70],62:[1,71],63:[1,72],64:[1,73],65:[1,74],66:[1,75],67:[1,76],68:[1,77]},{14:[2,38],16:[2,38],21:[2,38],48:[2,38],51:[2,38],52:[2,38],72:[2,38],73:[2,38],74:[2,38]},{21:[2,40]},{6:122,7:20,8:21,9:22,10:23,11:24,12:25,13:26,14:[1,27],16:[1,28],18:29,21:[2,2],22:6,26:30,48:[2,2],51:[2,2],52:[1,32],72:[1,7],73:[1,8],74:[1,31]},{21:[2,45],48:[2,45],51:[2,45]}],
defaultActions: {9:[2,1],120:[2,40]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        throw new Error(str);
    }
},
parse: function parse(input) {
    var self = this, stack = [0], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    this.lexer.setInput(input);
    this.lexer.yy = this.yy;
    this.yy.lexer = this.lexer;
    this.yy.parser = this;
    if (typeof this.lexer.yylloc == 'undefined') {
        this.lexer.yylloc = {};
    }
    var yyloc = this.lexer.yylloc;
    lstack.push(yyloc);
    var ranges = this.lexer.options && this.lexer.options.ranges;
    if (typeof this.yy.parseError === 'function') {
        this.parseError = this.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    function lex() {
        var token;
        token = self.lexer.lex() || EOF;
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (this.lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + this.lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: this.lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: this.lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(this.lexer.yytext);
            lstack.push(this.lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = this.lexer.yyleng;
                yytext = this.lexer.yytext;
                yylineno = this.lexer.yylineno;
                yyloc = this.lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                this.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};
/* generated by jison-lex 0.2.1 */
var lexer = (function(){
var lexer = {

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input) {
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len - 1);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {

var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0: /* skip whitespace */ 
break;
case 1: return 'NEWLINE'; 
break;
case 2: 
  yy_.yytext = yy_.yytext.substr(2, yy_.yyleng - 3).trim();
  return 14;

break;
case 3:
  yy_.yytext = yy_.yytext.substr(1, yy_.yyleng - 2);
  return 19

break;
case 4: return 72; 
break;
case 5: return 74; 
break;
case 6: return 74; 
break;
case 7: return 73; 
break;
case 8: this.begin('as'); return 20; 
break;
case 9: return 52; 
break;
case 10: return 45; 
break;
case 11: return 51; 
break;
case 12: return 48; 
break;
case 13: return 16; 
break;
case 14: return 21; 
break;
case 15: return 43; 
break;
case 16: return 44; 
break;
case 17: return 53; 
break;
case 18: return 64; 
break;
case 19: return 66; 
break;
case 20: return 55; 
break;
case 21: return 55; 
break;
case 22: return 56; 
break;
case 23: return 56; 
break;
case 24: return yy_.yytext; 
break;
case 25: return 67; 
break;
case 26: return 68; 
break;
case 27: return 69; 
break;
case 28: return 67; 
break;
case 29: return 68; 
break;
case 30: return 69; 
break;
case 31: return 41; 
break;
case 32: return 54; 
break;
case 33: return 70; 
break;
case 34: return 5; 
break;
}
},
rules: [/^(?:\s+)/,/^(?:(\r?\n)+)/,/^(?:--.*(\r|\n))/,/^(?:"[^\"]*"|'[^\']*')/,/^(?:object\b)/,/^(?:property\b)/,/^(?:prop\b)/,/^(?:array\b)/,/^(?:as\b)/,/^(?:if\b)/,/^(?:then\b)/,/^(?:elseif\b)/,/^(?:else\b)/,/^(?:return\b)/,/^(?:end\b)/,/^(?:true\b)/,/^(?:false\b)/,/^(?:null\b)/,/^(?:<=)/,/^(?:>=)/,/^(?:is\b)/,/^(?:==)/,/^(?:isnt\b)/,/^(?:!=)/,/^(?:([@+\-*/%^<>=(){}\[\]:,.]))/,/^(?:and\b)/,/^(?:or\b)/,/^(?:not\b)/,/^(?:&&)/,/^(?:\|\|)/,/^(?:!)/,/^(?:key\b)/,/^(?:(^(\d*\.?\d+)(?:e[+-]?\d+)?))/,/^(?:(^([$A-Za-z_\x7f-\uffff][$\w\x7f-\uffff]*)([^\n\S]*(?!))?))/,/^(?:$)/],
conditions: {"as":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34],"inclusive":true},"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34],"inclusive":true}}
};
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = parser;
exports.Parser = parser.Parser;
exports.parse = function () { return parser.parse.apply(parser, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}