/* parser generated by jison 0.4.13 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var parser = (function(){
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"file":3,"block_node_statement":4,"EOF":5,"opt_statement_list":6,"statement_list":7,"statement":8,"last_statement":9,"leaf_node_statement":10,"custom_node_block_statement":11,"if_block":12,"COMMENT":13,"RETURN":14,"expression":15,"node_type_list":16,"STRING":17,"AS":18,"END":19,"block_node_type":20,"node_attribute_list":21,"leaf_node_type":22,":":23,"if_expression":24,"node_attribute":25,",":26,"node_lookup":27,"node_attribute_statement":28,"global_node_lookup":29,"local_node_lookup":30,"@":31,"IDENTIFIER":32,"[":33,"]":34,".":35,"attribute_statement":36,"(":37,"attribute_setter_list":38,")":39,"attribute_setter":40,"ATTRIBUTE":41,"=":42,"THEN":43,"opt_elseif_block_list":44,"opt_else_block":45,"ELSE":46,"elseif_block_list":47,"elseif_block":48,"ELSEIF":49,"IF":50,"TRUE":51,"FALSE":52,"NULL":53,"NUMBER":54,"==":55,"!=":56,"+":57,"-":58,"*":59,"/":60,"^":61,"%":62,"<":63,"<=":64,">":65,">=":66,"AND":67,"OR":68,"NOT":69,"OBJECT":70,"ARRAY":71,"PROPERTY":72,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",13:"COMMENT",14:"RETURN",17:"STRING",18:"AS",19:"END",23:":",26:",",28:"node_attribute_statement",31:"@",32:"IDENTIFIER",33:"[",34:"]",35:".",37:"(",39:")",41:"ATTRIBUTE",42:"=",43:"THEN",46:"ELSE",49:"ELSEIF",50:"IF",51:"TRUE",52:"FALSE",53:"NULL",54:"NUMBER",55:"==",56:"!=",57:"+",58:"-",59:"*",60:"/",61:"^",62:"%",63:"<",64:"<=",65:">",66:">=",67:"AND",68:"OR",69:"NOT",70:"OBJECT",71:"ARRAY",72:"PROPERTY"},
productions_: [0,[3,2],[6,0],[6,1],[7,1],[7,2],[8,1],[8,1],[8,1],[8,1],[8,1],[8,1],[9,2],[11,5],[4,4],[10,2],[10,3],[21,1],[21,3],[25,1],[25,2],[27,1],[27,1],[29,2],[30,1],[30,3],[30,3],[30,4],[36,3],[38,1],[38,3],[40,3],[12,6],[45,0],[45,2],[44,0],[44,1],[47,1],[47,2],[48,4],[24,2],[15,1],[15,1],[15,1],[15,1],[15,1],[15,1],[15,3],[15,3],[15,3],[15,3],[15,3],[15,3],[15,3],[15,3],[15,3],[15,3],[15,3],[15,3],[15,3],[15,3],[15,3],[15,3],[15,2],[16,1],[16,1],[20,1],[20,1],[22,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
}
},
table: [{3:1,4:2,20:3,70:[1,4],71:[1,5]},{1:[3]},{5:[1,6]},{21:7,25:8,27:9,29:10,30:11,31:[1,12],32:[1,13],33:[1,14]},{17:[2,66],31:[2,66],32:[2,66],33:[2,66]},{17:[2,67],31:[2,67],32:[2,67],33:[2,67]},{1:[2,1]},{4:20,6:15,7:17,8:18,9:19,10:21,11:22,12:23,13:[1,24],14:[1,25],16:28,19:[2,2],20:26,22:27,24:29,26:[1,16],50:[1,31],70:[1,4],71:[1,5],72:[1,30]},{13:[2,17],14:[2,17],19:[2,17],23:[2,17],26:[2,17],46:[2,17],49:[2,17],50:[2,17],70:[2,17],71:[2,17],72:[2,17]},{13:[2,19],14:[2,19],19:[2,19],23:[2,19],26:[2,19],28:[1,32],46:[2,19],49:[2,19],50:[2,19],70:[2,19],71:[2,19],72:[2,19]},{13:[2,21],14:[2,21],19:[2,21],23:[2,21],26:[2,21],28:[2,21],46:[2,21],49:[2,21],50:[2,21],70:[2,21],71:[2,21],72:[2,21]},{13:[2,22],14:[2,22],19:[2,22],23:[2,22],26:[2,22],28:[2,22],33:[1,34],35:[1,33],46:[2,22],49:[2,22],50:[2,22],70:[2,22],71:[2,22],72:[2,22]},{30:35,32:[1,13],33:[1,14]},{13:[2,24],14:[2,24],19:[2,24],23:[2,24],26:[2,24],28:[2,24],33:[2,24],35:[2,24],46:[2,24],49:[2,24],50:[2,24],70:[2,24],71:[2,24],72:[2,24]},{17:[1,36]},{19:[1,37]},{25:38,27:9,29:10,30:11,31:[1,12],32:[1,13],33:[1,14]},{4:20,8:39,9:19,10:21,11:22,12:23,13:[1,24],14:[1,25],16:28,19:[2,3],20:26,22:27,24:29,46:[2,3],49:[2,3],50:[1,31],70:[1,4],71:[1,5],72:[1,30]},{13:[2,4],14:[2,4],19:[2,4],46:[2,4],49:[2,4],50:[2,4],70:[2,4],71:[2,4],72:[2,4]},{13:[2,6],14:[2,6],19:[2,6],46:[2,6],49:[2,6],50:[2,6],70:[2,6],71:[2,6],72:[2,6]},{13:[2,7],14:[2,7],19:[2,7],46:[2,7],49:[2,7],50:[2,7],70:[2,7],71:[2,7],72:[2,7]},{13:[2,8],14:[2,8],19:[2,8],23:[1,40],46:[2,8],49:[2,8],50:[2,8],70:[2,8],71:[2,8],72:[2,8]},{13:[2,9],14:[2,9],19:[2,9],46:[2,9],49:[2,9],50:[2,9],70:[2,9],71:[2,9],72:[2,9]},{13:[2,10],14:[2,10],19:[2,10],46:[2,10],49:[2,10],50:[2,10],70:[2,10],71:[2,10],72:[2,10]},{13:[2,11],14:[2,11],19:[2,11],46:[2,11],49:[2,11],50:[2,11],70:[2,11],71:[2,11],72:[2,11]},{15:41,17:[1,45],32:[1,47],33:[1,48],37:[1,49],51:[1,42],52:[1,43],53:[1,44],54:[1,46],69:[1,50]},{17:[2,64],21:7,25:8,27:9,29:10,30:11,31:[1,12],32:[1,13],33:[1,14]},{17:[2,65],21:51,25:8,27:9,29:10,30:11,31:[1,12],32:[1,13],33:[1,14]},{17:[1,52]},{43:[1,53]},{17:[2,68],31:[2,68],32:[2,68],33:[2,68]},{15:54,17:[1,45],32:[1,47],33:[1,48],37:[1,49],51:[1,42],52:[1,43],53:[1,44],54:[1,46],69:[1,50]},{13:[2,20],14:[2,20],19:[2,20],23:[2,20],26:[2,20],46:[2,20],49:[2,20],50:[2,20],70:[2,20],71:[2,20],72:[2,20]},{32:[1,55]},{17:[1,56]},{13:[2,23],14:[2,23],19:[2,23],23:[2,23],26:[2,23],28:[2,23],33:[1,34],35:[1,33],46:[2,23],49:[2,23],50:[2,23],70:[2,23],71:[2,23],72:[2,23]},{34:[1,57]},{5:[2,14],13:[2,14],14:[2,14],19:[2,14],46:[2,14],49:[2,14],50:[2,14],70:[2,14],71:[2,14],72:[2,14]},{13:[2,18],14:[2,18],19:[2,18],23:[2,18],26:[2,18],46:[2,18],49:[2,18],50:[2,18],70:[2,18],71:[2,18],72:[2,18]},{13:[2,5],14:[2,5],19:[2,5],46:[2,5],49:[2,5],50:[2,5],70:[2,5],71:[2,5],72:[2,5]},{24:58,50:[1,31]},{13:[2,12],14:[2,12],19:[2,12],46:[2,12],49:[2,12],50:[2,12],55:[1,59],56:[1,60],57:[1,61],58:[1,62],59:[1,63],60:[1,64],61:[1,65],62:[1,66],63:[1,67],64:[1,68],65:[1,69],66:[1,70],67:[1,71],68:[1,72],70:[2,12],71:[2,12],72:[2,12]},{13:[2,41],14:[2,41],19:[2,41],23:[2,41],39:[2,41],43:[2,41],46:[2,41],49:[2,41],50:[2,41],55:[2,41],56:[2,41],57:[2,41],58:[2,41],59:[2,41],60:[2,41],61:[2,41],62:[2,41],63:[2,41],64:[2,41],65:[2,41],66:[2,41],67:[2,41],68:[2,41],70:[2,41],71:[2,41],72:[2,41]},{13:[2,42],14:[2,42],19:[2,42],23:[2,42],39:[2,42],43:[2,42],46:[2,42],49:[2,42],50:[2,42],55:[2,42],56:[2,42],57:[2,42],58:[2,42],59:[2,42],60:[2,42],61:[2,42],62:[2,42],63:[2,42],64:[2,42],65:[2,42],66:[2,42],67:[2,42],68:[2,42],70:[2,42],71:[2,42],72:[2,42]},{13:[2,43],14:[2,43],19:[2,43],23:[2,43],39:[2,43],43:[2,43],46:[2,43],49:[2,43],50:[2,43],55:[2,43],56:[2,43],57:[2,43],58:[2,43],59:[2,43],60:[2,43],61:[2,43],62:[2,43],63:[2,43],64:[2,43],65:[2,43],66:[2,43],67:[2,43],68:[2,43],70:[2,43],71:[2,43],72:[2,43]},{13:[2,44],14:[2,44],19:[2,44],23:[2,44],39:[2,44],43:[2,44],46:[2,44],49:[2,44],50:[2,44],55:[2,44],56:[2,44],57:[2,44],58:[2,44],59:[2,44],60:[2,44],61:[2,44],62:[2,44],63:[2,44],64:[2,44],65:[2,44],66:[2,44],67:[2,44],68:[2,44],70:[2,44],71:[2,44],72:[2,44]},{13:[2,45],14:[2,45],19:[2,45],23:[2,45],39:[2,45],43:[2,45],46:[2,45],49:[2,45],50:[2,45],55:[2,45],56:[2,45],57:[2,45],58:[2,45],59:[2,45],60:[2,45],61:[2,45],62:[2,45],63:[2,45],64:[2,45],65:[2,45],66:[2,45],67:[2,45],68:[2,45],70:[2,45],71:[2,45],72:[2,45]},{13:[2,46],14:[2,46],19:[2,46],23:[2,46],39:[2,46],43:[2,46],46:[2,46],49:[2,46],50:[2,46],55:[2,46],56:[2,46],57:[2,46],58:[2,46],59:[2,46],60:[2,46],61:[2,46],62:[2,46],63:[2,46],64:[2,46],65:[2,46],66:[2,46],67:[2,46],68:[2,46],70:[2,46],71:[2,46],72:[2,46]},{17:[1,73]},{15:74,17:[1,45],32:[1,47],33:[1,48],37:[1,49],51:[1,42],52:[1,43],53:[1,44],54:[1,46],69:[1,50]},{15:75,17:[1,45],32:[1,47],33:[1,48],37:[1,49],51:[1,42],52:[1,43],53:[1,44],54:[1,46],69:[1,50]},{13:[2,15],14:[2,15],19:[2,15],23:[2,15],26:[1,16],46:[2,15],49:[2,15],50:[2,15],70:[2,15],71:[2,15],72:[2,15]},{18:[1,76]},{4:20,6:77,7:17,8:18,9:19,10:21,11:22,12:23,13:[1,24],14:[1,25],16:28,19:[2,2],20:26,22:27,24:29,46:[2,2],49:[2,2],50:[1,31],70:[1,4],71:[1,5],72:[1,30]},{13:[2,40],14:[2,40],19:[2,40],23:[2,40],43:[2,40],46:[2,40],49:[2,40],50:[2,40],55:[1,59],56:[1,60],57:[1,61],58:[1,62],59:[1,63],60:[1,64],61:[1,65],62:[1,66],63:[1,67],64:[1,68],65:[1,69],66:[1,70],67:[1,71],68:[1,72],70:[2,40],71:[2,40],72:[2,40]},{13:[2,26],14:[2,26],19:[2,26],23:[2,26],26:[2,26],28:[2,26],33:[2,26],35:[2,26],46:[2,26],49:[2,26],50:[2,26],70:[2,26],71:[2,26],72:[2,26]},{34:[1,78]},{13:[2,25],14:[2,25],19:[2,25],23:[2,25],26:[2,25],28:[2,25],33:[2,25],35:[2,25],46:[2,25],49:[2,25],50:[2,25],70:[2,25],71:[2,25],72:[2,25]},{13:[2,16],14:[2,16],19:[2,16],23:[2,16],46:[2,16],49:[2,16],50:[2,16],70:[2,16],71:[2,16],72:[2,16]},{15:79,17:[1,45],32:[1,47],33:[1,48],37:[1,49],51:[1,42],52:[1,43],53:[1,44],54:[1,46],69:[1,50]},{15:80,17:[1,45],32:[1,47],33:[1,48],37:[1,49],51:[1,42],52:[1,43],53:[1,44],54:[1,46],69:[1,50]},{15:81,17:[1,45],32:[1,47],33:[1,48],37:[1,49],51:[1,42],52:[1,43],53:[1,44],54:[1,46],69:[1,50]},{15:82,17:[1,45],32:[1,47],33:[1,48],37:[1,49],51:[1,42],52:[1,43],53:[1,44],54:[1,46],69:[1,50]},{15:83,17:[1,45],32:[1,47],33:[1,48],37:[1,49],51:[1,42],52:[1,43],53:[1,44],54:[1,46],69:[1,50]},{15:84,17:[1,45],32:[1,47],33:[1,48],37:[1,49],51:[1,42],52:[1,43],53:[1,44],54:[1,46],69:[1,50]},{15:85,17:[1,45],32:[1,47],33:[1,48],37:[1,49],51:[1,42],52:[1,43],53:[1,44],54:[1,46],69:[1,50]},{15:86,17:[1,45],32:[1,47],33:[1,48],37:[1,49],51:[1,42],52:[1,43],53:[1,44],54:[1,46],69:[1,50]},{15:87,17:[1,45],32:[1,47],33:[1,48],37:[1,49],51:[1,42],52:[1,43],53:[1,44],54:[1,46],69:[1,50]},{15:88,17:[1,45],32:[1,47],33:[1,48],37:[1,49],51:[1,42],52:[1,43],53:[1,44],54:[1,46],69:[1,50]},{15:89,17:[1,45],32:[1,47],33:[1,48],37:[1,49],51:[1,42],52:[1,43],53:[1,44],54:[1,46],69:[1,50]},{15:90,17:[1,45],32:[1,47],33:[1,48],37:[1,49],51:[1,42],52:[1,43],53:[1,44],54:[1,46],69:[1,50]},{15:91,17:[1,45],32:[1,47],33:[1,48],37:[1,49],51:[1,42],52:[1,43],53:[1,44],54:[1,46],69:[1,50]},{15:92,17:[1,45],32:[1,47],33:[1,48],37:[1,49],51:[1,42],52:[1,43],53:[1,44],54:[1,46],69:[1,50]},{34:[1,93]},{39:[1,94],55:[1,59],56:[1,60],57:[1,61],58:[1,62],59:[1,63],60:[1,64],61:[1,65],62:[1,66],63:[1,67],64:[1,68],65:[1,69],66:[1,70],67:[1,71],68:[1,72]},{13:[2,63],14:[2,63],19:[2,63],23:[2,63],39:[2,63],43:[2,63],46:[2,63],49:[2,63],50:[2,63],55:[2,63],56:[2,63],57:[2,63],58:[2,63],59:[2,63],60:[2,63],61:[1,65],62:[2,63],63:[2,63],64:[2,63],65:[2,63],66:[2,63],67:[2,63],68:[2,63],70:[2,63],71:[2,63],72:[2,63]},{4:20,6:95,7:17,8:18,9:19,10:21,11:22,12:23,13:[1,24],14:[1,25],16:28,19:[2,2],20:26,22:27,24:29,50:[1,31],70:[1,4],71:[1,5],72:[1,30]},{19:[2,35],44:96,46:[2,35],47:97,48:98,49:[1,99]},{13:[2,27],14:[2,27],19:[2,27],23:[2,27],26:[2,27],28:[2,27],33:[2,27],35:[2,27],46:[2,27],49:[2,27],50:[2,27],70:[2,27],71:[2,27],72:[2,27]},{13:[2,49],14:[2,49],19:[2,49],23:[2,49],39:[2,49],43:[2,49],46:[2,49],49:[2,49],50:[2,49],55:[2,49],56:[2,49],57:[1,61],58:[1,62],59:[1,63],60:[1,64],61:[1,65],62:[1,66],63:[2,49],64:[2,49],65:[2,49],66:[2,49],67:[2,49],68:[2,49],70:[2,49],71:[2,49],72:[2,49]},{13:[2,50],14:[2,50],19:[2,50],23:[2,50],39:[2,50],43:[2,50],46:[2,50],49:[2,50],50:[2,50],55:[2,50],56:[2,50],57:[1,61],58:[1,62],59:[1,63],60:[1,64],61:[1,65],62:[1,66],63:[2,50],64:[2,50],65:[2,50],66:[2,50],67:[2,50],68:[2,50],70:[2,50],71:[2,50],72:[2,50]},{13:[2,51],14:[2,51],19:[2,51],23:[2,51],39:[2,51],43:[2,51],46:[2,51],49:[2,51],50:[2,51],55:[2,51],56:[2,51],57:[2,51],58:[2,51],59:[1,63],60:[1,64],61:[1,65],62:[1,66],63:[2,51],64:[2,51],65:[2,51],66:[2,51],67:[2,51],68:[2,51],70:[2,51],71:[2,51],72:[2,51]},{13:[2,52],14:[2,52],19:[2,52],23:[2,52],39:[2,52],43:[2,52],46:[2,52],49:[2,52],50:[2,52],55:[2,52],56:[2,52],57:[2,52],58:[2,52],59:[1,63],60:[1,64],61:[1,65],62:[1,66],63:[2,52],64:[2,52],65:[2,52],66:[2,52],67:[2,52],68:[2,52],70:[2,52],71:[2,52],72:[2,52]},{13:[2,53],14:[2,53],19:[2,53],23:[2,53],39:[2,53],43:[2,53],46:[2,53],49:[2,53],50:[2,53],55:[2,53],56:[2,53],57:[2,53],58:[2,53],59:[2,53],60:[2,53],61:[1,65],62:[2,53],63:[2,53],64:[2,53],65:[2,53],66:[2,53],67:[2,53],68:[2,53],70:[2,53],71:[2,53],72:[2,53]},{13:[2,54],14:[2,54],19:[2,54],23:[2,54],39:[2,54],43:[2,54],46:[2,54],49:[2,54],50:[2,54],55:[2,54],56:[2,54],57:[2,54],58:[2,54],59:[2,54],60:[2,54],61:[1,65],62:[2,54],63:[2,54],64:[2,54],65:[2,54],66:[2,54],67:[2,54],68:[2,54],70:[2,54],71:[2,54],72:[2,54]},{13:[2,55],14:[2,55],19:[2,55],23:[2,55],39:[2,55],43:[2,55],46:[2,55],49:[2,55],50:[2,55],55:[2,55],56:[2,55],57:[2,55],58:[2,55],59:[2,55],60:[2,55],61:[1,65],62:[2,55],63:[2,55],64:[2,55],65:[2,55],66:[2,55],67:[2,55],68:[2,55],70:[2,55],71:[2,55],72:[2,55]},{13:[2,56],14:[2,56],19:[2,56],23:[2,56],39:[2,56],43:[2,56],46:[2,56],49:[2,56],50:[2,56],55:[2,56],56:[2,56],57:[2,56],58:[2,56],59:[2,56],60:[2,56],61:[1,65],62:[2,56],63:[2,56],64:[2,56],65:[2,56],66:[2,56],67:[2,56],68:[2,56],70:[2,56],71:[2,56],72:[2,56]},{13:[2,57],14:[2,57],19:[2,57],23:[2,57],39:[2,57],43:[2,57],46:[2,57],49:[2,57],50:[2,57],55:[1,59],56:[1,60],57:[1,61],58:[1,62],59:[1,63],60:[1,64],61:[1,65],62:[1,66],63:[2,57],64:[2,57],65:[2,57],66:[2,57],67:[2,57],68:[2,57],70:[2,57],71:[2,57],72:[2,57]},{13:[2,58],14:[2,58],19:[2,58],23:[2,58],39:[2,58],43:[2,58],46:[2,58],49:[2,58],50:[2,58],55:[1,59],56:[1,60],57:[1,61],58:[1,62],59:[1,63],60:[1,64],61:[1,65],62:[1,66],63:[2,58],64:[2,58],65:[2,58],66:[2,58],67:[2,58],68:[2,58],70:[2,58],71:[2,58],72:[2,58]},{13:[2,59],14:[2,59],19:[2,59],23:[2,59],39:[2,59],43:[2,59],46:[2,59],49:[2,59],50:[2,59],55:[1,59],56:[1,60],57:[1,61],58:[1,62],59:[1,63],60:[1,64],61:[1,65],62:[1,66],63:[2,59],64:[2,59],65:[2,59],66:[2,59],67:[2,59],68:[2,59],70:[2,59],71:[2,59],72:[2,59]},{13:[2,60],14:[2,60],19:[2,60],23:[2,60],39:[2,60],43:[2,60],46:[2,60],49:[2,60],50:[2,60],55:[1,59],56:[1,60],57:[1,61],58:[1,62],59:[1,63],60:[1,64],61:[1,65],62:[1,66],63:[2,60],64:[2,60],65:[2,60],66:[2,60],67:[2,60],68:[2,60],70:[2,60],71:[2,60],72:[2,60]},{13:[2,61],14:[2,61],19:[2,61],23:[2,61],39:[2,61],43:[2,61],46:[2,61],49:[2,61],50:[2,61],55:[1,59],56:[1,60],57:[1,61],58:[1,62],59:[1,63],60:[1,64],61:[1,65],62:[1,66],63:[1,67],64:[1,68],65:[1,69],66:[1,70],67:[2,61],68:[2,61],70:[2,61],71:[2,61],72:[2,61]},{13:[2,62],14:[2,62],19:[2,62],23:[2,62],39:[2,62],43:[2,62],46:[2,62],49:[2,62],50:[2,62],55:[1,59],56:[1,60],57:[1,61],58:[1,62],59:[1,63],60:[1,64],61:[1,65],62:[1,66],63:[1,67],64:[1,68],65:[1,69],66:[1,70],67:[1,71],68:[2,62],70:[2,62],71:[2,62],72:[2,62]},{13:[2,47],14:[2,47],19:[2,47],23:[2,47],39:[2,47],43:[2,47],46:[2,47],49:[2,47],50:[2,47],55:[2,47],56:[2,47],57:[2,47],58:[2,47],59:[2,47],60:[2,47],61:[2,47],62:[2,47],63:[2,47],64:[2,47],65:[2,47],66:[2,47],67:[2,47],68:[2,47],70:[2,47],71:[2,47],72:[2,47]},{13:[2,48],14:[2,48],19:[2,48],23:[2,48],39:[2,48],43:[2,48],46:[2,48],49:[2,48],50:[2,48],55:[2,48],56:[2,48],57:[2,48],58:[2,48],59:[2,48],60:[2,48],61:[2,48],62:[2,48],63:[2,48],64:[2,48],65:[2,48],66:[2,48],67:[2,48],68:[2,48],70:[2,48],71:[2,48],72:[2,48]},{19:[1,100]},{19:[2,33],45:101,46:[1,102]},{19:[2,36],46:[2,36],48:103,49:[1,99]},{19:[2,37],46:[2,37],49:[2,37]},{15:104,17:[1,45],32:[1,47],33:[1,48],37:[1,49],51:[1,42],52:[1,43],53:[1,44],54:[1,46],69:[1,50]},{13:[2,13],14:[2,13],19:[2,13],46:[2,13],49:[2,13],50:[2,13],70:[2,13],71:[2,13],72:[2,13]},{19:[1,105]},{4:20,6:106,7:17,8:18,9:19,10:21,11:22,12:23,13:[1,24],14:[1,25],16:28,19:[2,2],20:26,22:27,24:29,50:[1,31],70:[1,4],71:[1,5],72:[1,30]},{19:[2,38],46:[2,38],49:[2,38]},{43:[1,107],55:[1,59],56:[1,60],57:[1,61],58:[1,62],59:[1,63],60:[1,64],61:[1,65],62:[1,66],63:[1,67],64:[1,68],65:[1,69],66:[1,70],67:[1,71],68:[1,72]},{13:[2,32],14:[2,32],19:[2,32],46:[2,32],49:[2,32],50:[2,32],70:[2,32],71:[2,32],72:[2,32]},{19:[2,34]},{4:20,6:108,7:17,8:18,9:19,10:21,11:22,12:23,13:[1,24],14:[1,25],16:28,19:[2,2],20:26,22:27,24:29,46:[2,2],49:[2,2],50:[1,31],70:[1,4],71:[1,5],72:[1,30]},{19:[2,39],46:[2,39],49:[2,39]}],
defaultActions: {6:[2,1],106:[2,34]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        throw new Error(str);
    }
},
parse: function parse(input) {
    var self = this, stack = [0], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    this.lexer.setInput(input);
    this.lexer.yy = this.yy;
    this.yy.lexer = this.lexer;
    this.yy.parser = this;
    if (typeof this.lexer.yylloc == 'undefined') {
        this.lexer.yylloc = {};
    }
    var yyloc = this.lexer.yylloc;
    lstack.push(yyloc);
    var ranges = this.lexer.options && this.lexer.options.ranges;
    if (typeof this.yy.parseError === 'function') {
        this.parseError = this.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    function lex() {
        var token;
        token = self.lexer.lex() || EOF;
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (this.lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + this.lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: this.lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: this.lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(this.lexer.yytext);
            lstack.push(this.lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = this.lexer.yyleng;
                yytext = this.lexer.yytext;
                yylineno = this.lexer.yylineno;
                yyloc = this.lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                this.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};
/* generated by jison-lex 0.2.1 */
var lexer = (function(){
var lexer = {

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input) {
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len - 1);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {

var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0: /* skip whitespace */ 
break;
case 1: return 'NEWLINE'; 
break;
case 2: 
  yy_.yytext = yy_.yytext.substr(2, yy_.yyleng - 3).trim();
  return 13;

break;
case 3:
  yy_.yytext = yy_.yytext.substr(1, yy_.yyleng - 2);
  return 17

break;
case 4: return 70; 
break;
case 5: return 72; 
break;
case 6: return 72; 
break;
case 7: return 71; 
break;
case 8: this.begin('as'); return 18; 
break;
case 9: return 50; 
break;
case 10: return 43; 
break;
case 11: return 49; 
break;
case 12: return 46; 
break;
case 13: return 14; 
break;
case 14: return 19; 
break;
case 15: return 51; 
break;
case 16: return 52; 
break;
case 17: return 53; 
break;
case 18: return yy_.yytext; 
break;
case 19: return 64; 
break;
case 20: return 66; 
break;
case 21: return 55; 
break;
case 22: return 56; 
break;
case 23: return 67; 
break;
case 24: return 68; 
break;
case 25: return 69; 
break;
case 26: return 67; 
break;
case 27: return 68; 
break;
case 28: return 69; 
break;
case 29: return 41; 
break;
case 30: return 54; 
break;
case 31: return 32; 
break;
case 32: return 5; 
break;
}
},
rules: [/^(?:\s+)/,/^(?:(\r?\n)+)/,/^(?:--.*(\r|\n))/,/^(?:"[^\"]*"|'[^\']*')/,/^(?:object\b)/,/^(?:property\b)/,/^(?:prop\b)/,/^(?:array\b)/,/^(?:as\b)/,/^(?:if\b)/,/^(?:then\b)/,/^(?:elseif\b)/,/^(?:else\b)/,/^(?:return\b)/,/^(?:end\b)/,/^(?:true\b)/,/^(?:false\b)/,/^(?:null\b)/,/^(?:([@+\-*/%^<>=(){}\[\]:,.]))/,/^(?:<=)/,/^(?:>=)/,/^(?:==)/,/^(?:!=)/,/^(?:and\b)/,/^(?:or\b)/,/^(?:not\b)/,/^(?:&&)/,/^(?:\|\|)/,/^(?:!)/,/^(?:key\b)/,/^(?:(^(\d*\.?\d+)(?:e[+-]?\d+)?))/,/^(?:(^([$A-Za-z_\x7f-\uffff][$\w\x7f-\uffff]*)([^\n\S]*(?!))?))/,/^(?:$)/],
conditions: {"as":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32],"inclusive":true},"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32],"inclusive":true}}
};
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = parser;
exports.Parser = parser.Parser;
exports.parse = function () { return parser.parse.apply(parser, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}